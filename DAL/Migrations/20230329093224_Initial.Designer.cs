// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230329093224_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExerciseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Exercise");

                    b.HasDiscriminator<string>("ExerciseType").HasValue("Exercise");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DAL.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LessonDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lesson");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonDescription = "it is first lesson",
                            LessonName = "lesson1"
                        },
                        new
                        {
                            Id = 2,
                            LessonDescription = "it is second lesson",
                            LessonName = "lesson2"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Bender03@gmail.com",
                            IsEmailConfirmed = true,
                            Login = "BenderRobot",
                            Password = "qwerty01"
                        },
                        new
                        {
                            Id = 2,
                            Email = "JackD@gmail.com",
                            IsEmailConfirmed = true,
                            Login = "Jack",
                            Password = "qwerty02"
                        });
                });

            modelBuilder.Entity("DAL.Entities.GrammarExercise", b =>
                {
                    b.HasBaseType("DAL.Entities.Exercise");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Grammar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Have",
                            IsComplete = false,
                            LessonId = 1,
                            Name = "Choose right verb",
                            Question = "_ done your homework?",
                            Variables = "[\"Have\",\"Has\",\"Had\"]"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Went",
                            IsComplete = false,
                            LessonId = 2,
                            Name = "Choose right verb",
                            Question = "Last month I _ to Scotland on holiday.",
                            Variables = "[\"Go\",\"Went\"]"
                        });
                });

            modelBuilder.Entity("DAL.Entities.TranslateExercise", b =>
                {
                    b.HasBaseType("DAL.Entities.Exercise");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TextBlocks")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("UseBlocks")
                        .HasColumnType("bit");

                    b.ToTable("Exercise", t =>
                        {
                            t.Property("Question")
                                .HasColumnName("TranslateExercise_Question");
                        });

                    b.HasDiscriminator().HasValue("Translate");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Answer = "You ate yesterday?",
                            IsComplete = false,
                            LessonId = 1,
                            Name = "Translate sentence",
                            Question = "Ти їв вчора?",
                            TextBlocks = "[\"You\",\"ate\",\"yesterday?\"]",
                            UseBlocks = true
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Ти їв учора?",
                            IsComplete = false,
                            LessonId = 2,
                            Name = "Translate sentence",
                            Question = "You ate yesterday?",
                            TextBlocks = "[]",
                            UseBlocks = false
                        });
                });

            modelBuilder.Entity("DAL.Entities.VoiceExercise", b =>
                {
                    b.HasBaseType("DAL.Entities.Exercise");

                    b.Property<string>("TextToSay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Voice");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Answer = "Ти їв учора?",
                            IsComplete = false,
                            LessonId = 1,
                            Name = "Translate sentence",
                            TextToSay = "You ate yesterday"
                        },
                        new
                        {
                            Id = 6,
                            Answer = "You ate yesterday",
                            IsComplete = false,
                            LessonId = 2,
                            Name = "Translate sentence",
                            TextToSay = "Ти їв учора?"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Exercise", b =>
                {
                    b.HasOne("DAL.Entities.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("DAL.Entities.Lesson", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
